@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using PriceInfo.Services
@using System.Text
@using PriceInfo.Classes
@using Newtonsoft.Json
@using System.Globalization
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts

@inject HttpClient Http
@page "/"
@page "/{priceArea}"

<div class="control-section" align='center'>
    <SfChart Title="@xTitle">
        @*<SfChart Title="@xTitle" Width="1100px" Height="380px">*@

        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        @*<ChartEvents OnAxisLabelRender="axisLabel"></ChartEvents>*@
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="270">
            <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="@yTitle">

            <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>

        @*<ChartTooltipSettings Enable="true" Header="Sales" Format="<b>${series.name} : ${point.y}</b>"></ChartTooltipSettings>*@
        <ChartLegendSettings Visible="true" EnableHighlight="false" Position="LegendPosition.Top" />

        <ChartSeriesCollection>
            <ChartSeries ColumnWidth="0.5" DataSource="@graphDataColumn" XName="columnText" YName="SpotPriceDKK_kWh" Width="2" Name="kWh pris" Type="ChartSeriesType.StackingColumn">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries ColumnWidth="0.5" DataSource="@graphDataColumn" XName="columnText" YName="Tarif" Width="2" Name="Tarif" Type="ChartSeriesType.StackingColumn">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries ColumnWidth="0.5" DataSource="@graphDataColumn" XName="columnText" YName="Duty" Width="2" Name="El-Afgift" Type="ChartSeriesType.StackingColumn">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries ColumnWidth="0.5" DataSource="@graphDataColumn" XName="columnText" YName="VAT" Width="2" Name="Moms" Type="ChartSeriesType.StackingColumn">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
        </ChartSeriesCollection>

    </SfChart>

    <SfChart Title="" Width="660px" Height="800px">
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelRotation="-90">
        </ChartPrimaryXAxis>

        <ChartSeriesCollection>
            <ChartSeries DataSource="@graphDataBar" PointColorMapping="color" XName="columnText" YName="Total" Opacity="0.9" DashArray="5" Type="ChartSeriesType.Bar">
                <ChartMarker>
                    <ChartDataLabel Visible="true" Name="markingOre" EnableRotation="true" Angle="0" Alignment="Alignment.Near" Position="LabelPosition.Bottom">
                        <div>@yTitle</div>
                    </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

<style>
    .e-panel-header {
        background-color: rgba(0, 0, 0, .1);
        text-align: center;
    }

    .e-panel-content {
        text-align: center;
        margin-top: 10px;
    }
</style>


@code{

    [Parameter]
    public string priceArea { get; set; }



    protected override void OnInitialized()
    {
        priceArea = priceArea ?? "N1";

    }


    Prices prices = new Prices();
    List<ActualPrice> graphDataColumn;
    List<ActualPrice> graphDataBar;
    List<EstimatedPrice> graphDataForcast;
    string yTitle;
    string xTitle;

    protected override async Task OnInitializedAsync()
    {
        yTitle = $"DK1 - {priceArea} [øre/kWh]";
        xTitle = $"Priser indholder spotpris DK1, Net Tarif {priceArea}, El-Afgift og Moms";


        ListofTarifs(prices);
        await GetSpotPrice(prices);
        await GetForeCast(prices);
        await MatchSpotWithTarif(prices, priceArea);
        await AddDuty(prices);
        PrepareGraphData();

        //PrepareGraphDataForCast();
    }

    private void PrepareGraphDataForCast()
    {
        double max = 0.0;
        double avg = 0.0;
        double sum = 0.0;

        foreach (var p in prices.calculatedForeCastPrices)
        {
            StringBuilder sb = new();
            sb.Append(p.HourDK.Date.ToString("dd/MM"));
            sb.Append("  ");

            sb.Append(p.HourDK.Hour.ToString());
            sb.Append("-");
            sb.Append(p.HourDK.AddHours(1).Hour.ToString());

            p.columnText = sb.ToString();
            p.Total = Math.Round(((p.SpotPriceDKK / 7.44) + p.Tarif) * 1.25, 1);
            p.SpotPriceDKK = Math.Round(p.SpotPriceDKK / 7.44, 2);
            p.marking = $"{p.Total} øre";

            sum = sum + p.Total;

            if (p.Total >= max)
            {
                max = p.Total;
            }
        }
        avg = sum / prices.forCast.DK1.Count;

        foreach (var p in prices.calculatedForeCastPrices)
        {
            p.color = "orange";
            if (p.Total <= avg)
            {
                p.color = "green";
            }
            if (p.Total > max * 0.75)
            {
                p.color = "red";
            }
        }
        DateTime foreCastBeginDate = new();
        foreCastBeginDate = prices.calculatedActualPrices.Max(x => x.HourDK);

        graphDataForcast = prices.calculatedForeCastPrices.OrderByDescending(x => x.HourDK).Where(x => x.HourDK > foreCastBeginDate.AddHours(0)).ToList();

    }
    private async Task GetForeCast(Prices prices)
    {
        prices.forCast = new();
        var endpoint = new Uri("https://raw.githubusercontent.com/solmoller/Spotprisprognose/main/prognose.json");
        prices.forCast = await Http.GetFromJsonAsync<Forecast>(endpoint);

    }

    private async Task GetSpotPrice(Prices prices)
    {
        prices.spotPrice = new();


        //https://api.energidataservice.dk/dataset/Elspotprices?start=2022-12-31&end=2023-01-01&filter={%22PriceArea%22:[%22DK1%22]}
        string today = DateTime.Today.ToString("yyyy-MM-dd");
        string tomorrow = DateTime.Today.AddDays(2).ToString("yyyy-MM-dd");
        StringBuilder sb = new StringBuilder();
        sb.Append("https://api.energidataservice.dk/dataset/Elspotprices?start=");
        sb.Append(today);
        sb.Append("&end=");
        sb.Append(tomorrow);
        sb.Append("&filter={%22PriceArea%22:[%22DK1%22]}");

        var endpoint = new Uri(sb.ToString());
        prices.spotPrice = await Http.GetFromJsonAsync<SpotPrice>(endpoint);

    }

    private void PrepareGraphData()
    {
        double max = 0.0;
        double avg = 0.0;
        double sum = 0.0;


        foreach (var p in prices.calculatedActualPrices)
        {
            StringBuilder sb = new();
            sb.Append(p.HourDK.Date.ToString("dd/MM"));
            sb.Append("  ");

            sb.Append(p.HourDK.Hour.ToString());
            sb.Append("-");
            sb.Append(p.HourDK.AddHours(1).Hour.ToString());

            p.columnText = sb.ToString();
            double calc_sum = ((p.SpotPriceDKK_kWh) + p.Tarif + p.Duty);
            p.VAT = Math.Round(calc_sum * 0.25, 2);
            p.Total = Math.Round(calc_sum * 1.25, 1);
            p.Duty = Math.Round(p.Duty, 2);
            p.SpotPriceDKK_kWh = Math.Round(p.SpotPriceDKK_kWh, 2);
            p.markingOre = $"{p.Total} øre";
            p.markingKr = $"{Math.Round(p.Total / 100, 2)}";
            sum = sum + p.Total;
            if (p.Total >= max)
            {
                max = p.Total;
            }
        }
        avg = sum / prices.calculatedActualPrices.Count;

        foreach (var p in prices.calculatedActualPrices)
        {
            p.color = "orange";
            if (p.Total <= avg)
            {
                p.color = "green";
            }
            if (p.Total > max * 0.75)
            {
                p.color = "red";
            }
        }




        graphDataColumn = prices.calculatedActualPrices.OrderBy(x => x.HourDK).Where(x => x.HourDK > DateTime.Now.AddHours(-1)).ToList();
        graphDataBar = prices.calculatedActualPrices.Where(x => x.HourDK > DateTime.Now.AddHours(-1)).ToList();
    }

    private async Task AddDuty(Prices prices)
    {
        foreach (var p in prices.calculatedActualPrices)
        {
            //Without VAT
            //https://skm.dk/tal-og-metode/satser/satser-og-beloebsgraenser-i-lovgivningen/elafgiftsloven
            //p.Duty = 69.7; //2023
            p.Duty = 76.1; //2024
        }

    }

    private async Task MatchSpotWithTarif(Prices prices, string priceArea)
    {
        //Only works on price area DK1 currently

        prices.calculatedActualPrices = new();
        foreach (var r in prices.spotPrice.records)
        {
            ActualPrice ap = new(r.HourDK, r.SpotPriceDKK / 10, AddTarif(r.HourDK.Hour, prices.tarifs, priceArea));
            prices.calculatedActualPrices.Add(ap);
            //Console.WriteLine(r.HourDK.Hour);
        }

        //prices.calculatedForeCastPrices = new();
        //foreach (var r in prices.forCast.DK1)
        //{
        //    EstimatedPrice fp = new(r.Time, r.Price, AddTarif(r.Time.Hour, prices.tarifs, priceArea));
        //    prices.calculatedForeCastPrices.Add(fp);
        //}
    }

    private static double AddTarif(int hour, List<TarifWindow> tarifs, string priceArea)
    {
        double output = 0.0;
        foreach (var t in tarifs.Where(x => x.PriceArea == priceArea))
        {
            if (hour >= t.StartHourDK && hour < t.EndHourDK)
            {
                output = t.TarifDKK;
            }
        }
        return output;
    }

    private static void ListofTarifs(Prices prices)
    {
        prices.tarifs = new List<TarifWindow>();


        //Prices without VAT

        ////https://n1.dk/priser-og-vilkaar/kommende-priser-1-1-2024
        //prices.tarifs.Add(new(0, 6, "N1", 0.0));
        //prices.tarifs.Add(new(6, 17, "N1", 0.0));
        //prices.tarifs.Add(new(17, 21, "N1", 0.0));
        //prices.tarifs.Add(new(21, 24, "N1", 0.0));

        ////https://dinel.dk/priser-og-bestemmelser/
        //prices.tarifs.Add(new(0, 6, "DinEl", 12.24));
        //prices.tarifs.Add(new(6, 17, "DinEl", 36.73));
        //prices.tarifs.Add(new(17, 21, "DinEl", 110.2));
        //prices.tarifs.Add(new(21, 24, "DinEl", 36.73));

        ////https://n1.dk/priser-og-vilkaar/kommende-priser-1-1-2024
        //prices.tarifs.Add(new(0, 6, "N1", 11.01));
        //prices.tarifs.Add(new(6, 17, "N1", 33.03));
        //prices.tarifs.Add(new(17, 21, "N1", 99.01));
        //prices.tarifs.Add(new(21, 24, "N1", 33.03));

        ////https://dinel.dk/priser-og-bestemmelser/
        //prices.tarifs.Add(new(0, 6, "DinEl", 8.82));
        //prices.tarifs.Add(new(6, 17, "DinEl", 26.45));
        //prices.tarifs.Add(new(17, 21, "DinEl", 79.36));
        //prices.tarifs.Add(new(21, 24, "DinEl", 26.45));

        
        prices.tarifs.Add(new(0, 6, "N1", 11.01));
        prices.tarifs.Add(new(6, 17, "N1", 16.52));
        prices.tarifs.Add(new(17, 21, "N1", 42.95));
        prices.tarifs.Add(new(21, 24, "N1", 16.52));

        
        prices.tarifs.Add(new(0, 6, "DinEl", 8.82));
        prices.tarifs.Add(new(6, 17, "DinEl", 13.23));
        prices.tarifs.Add(new(17, 21, "DinEl", 34.39));
        prices.tarifs.Add(new(21, 24, "DinEl", 13.23));
    }

}


